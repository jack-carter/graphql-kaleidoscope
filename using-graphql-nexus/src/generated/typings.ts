/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */







declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  DepartmentCategory: "ACCOUNTING" | "CUSTOMERSERVICE" | "MARKETING"
}

export interface NexusGenRootTypes {
  Department: { // root type
    name: string; // String!
    type?: NexusGenEnums['DepartmentCategory'] | null; // DepartmentCategory
  }
  Employee: { // root type
    fulltime: boolean; // Boolean!
    name: string; // String!
  }
  Query: {};
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  DepartmentCategory: NexusGenEnums['DepartmentCategory'];
}

export interface NexusGenFieldTypes {
  Department: { // field return type
    employees: NexusGenRootTypes['Employee'][]; // [Employee!]!
    name: string; // String!
    type: NexusGenEnums['DepartmentCategory'] | null; // DepartmentCategory
  }
  Employee: { // field return type
    department: NexusGenRootTypes['Department']; // Department!
    fulltime: boolean; // Boolean!
    name: string; // String!
  }
  Query: { // field return type
    departments: NexusGenRootTypes['Department'][]; // [Department!]!
    employees: NexusGenRootTypes['Employee'][]; // [Employee!]!
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Department" | "Employee" | "Query";

export type NexusGenInputNames = never;

export type NexusGenEnumNames = "DepartmentCategory";

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}